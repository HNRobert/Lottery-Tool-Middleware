name: CI Tests and Quality Checks

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "requirements.txt"
      - "Dockerfile"
      - ".github/workflows/**"
    tags:
      - "v*"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/**"
      - "requirements.txt"
      - "Dockerfile"
      - ".github/workflows/**"
  workflow_dispatch:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.changes.outputs.should-test }}
      test-reason: ${{ steps.changes.outputs.test-reason }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 检查是否需要测试
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "test-reason=手动触发" >> $GITHUB_OUTPUT
            echo "🔧 手动触发测试"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "test-reason=标签推送" >> $GITHUB_OUTPUT
            echo "🏷️ 标签推送，执行测试"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "test-reason=Pull Request" >> $GITHUB_OUTPUT
            echo "📋 PR创建，执行测试"
          else
            # 检查源码是否有变更
            if git diff --name-only HEAD~1 | grep -E "(src/|requirements\.txt|\.github/workflows/)" > /dev/null; then
              echo "should-test=true" >> $GITHUB_OUTPUT
              echo "test-reason=源码变更" >> $GITHUB_OUTPUT
              echo "✅ 检测到相关文件变更，执行测试"
              echo "变更的文件:"
              git diff --name-only HEAD~1 | grep -E "(src/|requirements\.txt|\.github/workflows/)"
            else
              echo "should-test=false" >> $GITHUB_OUTPUT
              echo "test-reason=无相关变更" >> $GITHUB_OUTPUT
              echo "ℹ️ 未检测到相关文件变更，跳过测试"
            fi
          fi

  test:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-test == 'true'
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: 📋 测试信息
        run: |
          echo "🧪 开始执行代码质量检查"
          echo "📝 触发原因: ${{ needs.check-changes.outputs.test-reason }}"
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 autopep8 isort

      - name: 代码格式检查 (autopep8)
        continue-on-error: true
        run: |
          pip install autopep8
          autopep8 --diff --exit-code **/*.py || echo "autopep8 failed" >> result.log

      - name: 导入排序检查 (isort)
        continue-on-error: true
        run: |
          isort --check-only --diff src/ || echo "isort failed" >> result.log

      - name: 代码风格检查 (Flake8)
        continue-on-error: true
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "flake8 strict failed" >> result.log
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || echo "flake8 loose failed" >> result.log

      - name: 类型检查
        continue-on-error: true
        run: |
          pip install mypy
          mypy src/ --ignore-missing-imports || echo "mypy failed" >> result.log

      - name: 检查所有结果
        run: |
          if [ -f result.log ]; then
            echo "❌ 有步骤失败："
            cat result.log
            exit 1
          else
            echo "✅ 所有检查通过"
          fi

  # 测试总结
  test-summary:
    runs-on: ubuntu-latest
    needs: [check-changes, test]
    if: always()

    steps:
      - name: 测试总结
        run: |
          echo "## 🧪 CI 测试总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **触发原因**: ${{ needs.check-changes.outputs.test-reason }}" >> $GITHUB_STEP_SUMMARY
          echo "- **是否执行**: ${{ needs.check-changes.outputs.should-test }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.check-changes.outputs.should-test }}" == "true" ]]; then
            if [[ "${{ needs.test.result }}" == "success" ]]; then
              echo "- **测试结果**: ✅ 通过" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "所有代码质量检查已通过！" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.test.result }}" == "failure" ]]; then
              echo "- **测试结果**: ❌ 失败" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "请检查代码质量问题并修复。" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **测试结果**: ⏭️ 跳过" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "未检测到相关文件变更，已跳过测试。" >> $GITHUB_STEP_SUMMARY
          fi
